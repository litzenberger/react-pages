{"ast":null,"code":"var _jsxFileName = \"/Users/ronlitzenberger/nearform/githubPages/react-pages/src/Chat.js\";\nimport React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage'; //const URL = 'ws://localhost:3030'\n\nconst URL = 'ws://localhost:8080/system'; //const URL = 'wss://echo.websocket.org'\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: 'System',\n      messages: []\n    };\n    this.ws = new WebSocket(URL);\n\n    this.addMessage = message => this.setState(state => ({\n      messages: [message, ...state.messages]\n    }));\n\n    this.submitMessage = messageString => {\n      // on submitting the ChatInput form, send the message, add it to the list and reset the input\n      const message = {\n        name: this.state.name,\n        message: messageString\n      };\n      this.ws.send(JSON.stringify(message));\n      this.addMessage(message);\n    };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n    };\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data);\n      this.addMessage(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(ChatInput, {\n      ws: this.ws,\n      onSubmitMessage: messageString => this.submitMessage(messageString),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), this.state.messages.map((message, index) => React.createElement(ChatMessage, {\n      key: index,\n      message: message.message,\n      name: message.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/ronlitzenberger/nearform/githubPages/react-pages/src/Chat.js"],"names":["React","Component","ChatInput","ChatMessage","URL","Chat","state","name","messages","ws","WebSocket","addMessage","message","setState","submitMessage","messageString","send","JSON","stringify","componentDidMount","onopen","console","log","onmessage","evt","parse","data","onclose","render","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,MAAMC,GAAG,GAAG,4BAAZ,C,CACA;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACnB;AACNC,MAAAA,IAAI,EAAE,QADA;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADmB;AAAA,SAM3BC,EAN2B,GAMtB,IAAIC,SAAJ,CAAcN,GAAd,CANsB;;AAAA,SA6B3BO,UA7B2B,GA6BdC,OAAO,IAClB,KAAKC,QAAL,CAAcP,KAAK,KAAK;AAAEE,MAAAA,QAAQ,EAAE,CAACI,OAAD,EAAU,GAAGN,KAAK,CAACE,QAAnB;AAAZ,KAAL,CAAnB,CA9ByB;;AAAA,SAgC3BM,aAhC2B,GAgCXC,aAAa,IAAI;AAC/B;AACA,YAAMH,OAAO,GAAG;AAAEL,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAnB;AAAyBK,QAAAA,OAAO,EAAEG;AAAlC,OAAhB;AACA,WAAKN,EAAL,CAAQO,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAb;AACA,WAAKD,UAAL,CAAgBC,OAAhB;AACD,KArC0B;AAAA;;AAQ3BO,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,EAAL,CAAQW,MAAR,GAAiB,MAAM;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAHD;;AAKA,SAAKb,EAAL,CAAQc,SAAR,GAAoBC,GAAG,IAAI;AACzB;AACA,YAAMZ,OAAO,GAAGK,IAAI,CAACQ,KAAL,CAAWD,GAAG,CAACE,IAAf,CAAhB;AACA,WAAKf,UAAL,CAAgBC,OAAhB;AACD,KAJD;;AAMA,SAAKH,EAAL,CAAQkB,OAAR,GAAkB,MAAM;AACtBN,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADsB,CAEtB;;AACA,WAAKT,QAAL,CAAc;AACZJ,QAAAA,EAAE,EAAE,IAAIC,SAAJ,CAAcN,GAAd;AADQ,OAAd;AAGD,KAND;AAOD;;AAYDwB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAE,KAAKnB,EADX;AAEE,MAAA,eAAe,EAAEM,aAAa,IAAI,KAAKD,aAAL,CAAmBC,aAAnB,CAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKG,KAAKT,KAAL,CAAWE,QAAX,CAAoBqB,GAApB,CAAwB,CAACjB,OAAD,EAAUkB,KAAV,KACvB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,OAAO,EAAElB,OAAO,CAACA,OAFnB;AAGE,MAAA,IAAI,EAAEA,OAAO,CAACL,IAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CALH,CADF;AAeD;;AAvD0B;;AA0D7B,eAAeF,IAAf","sourcesContent":["import React, { Component } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\n\n//const URL = 'ws://localhost:3030'\nconst URL = 'ws://localhost:8080/system'\n//const URL = 'wss://echo.websocket.org'\n\nclass Chat extends Component {\n  state = {\n    name: 'System',\n    messages: [],\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data)\n      this.addMessage(message)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n    this.addMessage(message)\n  }\n\n  render() {\n    return (\n      <div>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        {this.state.messages.map((message, index) =>\n          <ChatMessage\n            key={index}\n            message={message.message}\n            name={message.name}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}