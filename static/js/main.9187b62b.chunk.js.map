{"version":3,"sources":["ChatInput.js","ChatMessage.js","Chat.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ChatInput","state","message","_this2","this","react_default","a","createElement","action","onSubmit","e","preventDefault","props","onSubmitMessage","setState","type","placeholder","value","onChange","target","Component","ChatMessage","_ref","name","URL","Chat","messages","ws","WebSocket","addMessage","_this","concat","Object","toConsumableArray","submitMessage","messageString","send","JSON","stringify","onopen","console","log","onmessage","evt","parse","data","onclose","_this3","htmlFor","id","src_ChatInput","map","index","key","App","className","src","logo","alt","src_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9187b62b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatInput extends Component {\n  static propTypes = {\n    onSubmitMessage: PropTypes.func.isRequired,\n  }\n  state = {\n    message: '',\n  }\n\n  render() {\n    return (\n      <form\n        action=\".\"\n        onSubmit={e => {\n          e.preventDefault()\n          this.props.onSubmitMessage(this.state.message)\n          this.setState({ message: '' })\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder={'Enter message...'}\n          value={this.state.message}\n          onChange={e => this.setState({ message: e.target.value })}\n        />\n        <input type=\"submit\" value={'Send'} />\n      </form>\n    )\n  }\n}\n\nexport default ChatInput","import React from 'react'\n\nexport default ({ name, message }) => \n  <p>\n    <strong>{name}</strong> <em>{message}</em>\n  </p>","import React, { Component } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\n\n//const URL = 'ws://localhost:3030'\nconst URL = 'wss://echo.websocket.org'\n\nclass Chat extends Component {\n  state = {\n    name: 'Bob',\n    messages: [],\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data)\n      this.addMessage(message)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n    this.addMessage(message)\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"name\">\n          Name:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </label>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        {this.state.messages.map((message, index) =>\n          <ChatMessage\n            key={index}\n            message={message.message}\n            name={message.name}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Chat","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Chat from './Chat'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <Chat />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}